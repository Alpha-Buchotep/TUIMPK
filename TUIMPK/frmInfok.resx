<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="pbFejlec.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="lblPgVer.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="contactLbl.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="btnBezar.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="panelInfo.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="lblInformaciok.Text" xml:space="preserve">
    <value>░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░█████╗░██████╗░██╗░░██╗███████╗░█████╗░██╗░░░░░░░░░░░░
░░░░░░░░░░░░██╔══██╗╚════██╗██║░░██║██╔════╝██╔══██╗██║░░░░░░░░░░░░
░░░░░░░░░░░░██║░░╚═╝░░███╔═╝███████║██████╗░██║░░╚═╝██║░░░░░░░░░░░░
░░░░░░░░░░░░██║░░██╗██╔══╝░░██╔══██║╚════██╗██║░░██╗██║░░░░░░░░░░░░
░░░░░░░░░░░░╚█████╔╝███████╗██║░░██║██████╔╝╚█████╔╝███████╗░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

 You can use this app to knock specified TCP / UDP / ICMP port(s) on router / switch.

 With this app You can simply knock TCP or UDP / ICMP port(s) or knock UDP port(s) with pattern
 (password).

 FLUXUS = The text (pattern / password) that You want to send to receiver (ex. Layer7).

 FLUXUS accept UTF-8 text, but using ASCII characters is safer.

 If FLUXUS not in use (empty), then no pattern matching, only simple port knocking.

 --------------------------------------------------------------------------------
 PASSWORD SET
 --------------------------------------------------------------------------------

 Click on Tool icon to show settings panel.

 You can save configuration file password to Your PC.
 To do this click the "Save password (This PC only)" button.

 Minimum password length: 8 characters.
 Maximum password length: 128 characters.
 
 App has a built in password to encrypt config files.

 Note that: this password is public!

 For maximum security USE YOUR OWN PASSWORD!

 --------------------------------------------------------------------------------
 CLEAR SAVED CONFIG FILE PASSWORD
 --------------------------------------------------------------------------------

 Click on Tool icon to show settings panel.

 Clear password field, uncheck Save password (green color)
 and hit Set config file password button.

 --------------------------------------------------------------------------------
 NOTES:
 --------------------------------------------------------------------------------

 - YOU CAN SET DELAY (0.5 - 5.0 sec) BETWEEN PACKETS TO THE KNOCK ALL routine.
    ON THE SETTINGS  PANEL
 
 - TCP Knocking is asynchronous (no errror report)

 - DNS Resolve increase connection time, do not use for IP addresses.

 - Configuration file is AES-256+Base64 encrypted / encoded, do not edit manually.

 - If You forget Your config file password You can't decode it anymore!

 --------------------------------------------------------------------------------
 HINTS:
 --------------------------------------------------------------------------------
 
 - Double click in input box to show data.

 - Double click to icon to change theme (light / dark / brown).
 
 - RESET button not clear saved password.

 --------------------------------------------------------------------------------

 App tested:

 - MikroTik RouterOS 6.48.6
 - MikroTik RouterOS 6.49.7
 - MikroTik RouterOS 7.6
 - IPTables

 - Mikrotik hAP ac3 router
 - Mikrotik CRS 326 switch
 - Mikrotik RB4011 router

 OS

 - W7 Pro 64 bit, SP1
 - W10 Pro 64 bit

 This software requires Microsoft .NET Framework 4.5.

 --------------------------------------------------------------------------------

 This software is absolutely free! ;-)

 Created with love by C2H5Cl - Aethyl-chloride, Hungary, 1983-2023.

 Feel free to write to me!

</value>
  </data>
</root>